{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.model.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/clients/client-add/client-add.component.ts","webpack:///src/app/clients/client-add/client-add.component.html","webpack:///src/app/clients/client-edit/client-edit.component.ts","webpack:///src/app/clients/client-edit/client-edit.component.html","webpack:///src/app/clients/client-list/client-list.component.ts","webpack:///src/app/clients/client-list/client-list.component.html","webpack:///src/app/clients/client-view/client-view.component.ts","webpack:///src/app/clients/client-view/client-view.component.html","webpack:///src/app/clients/clients.component.ts","webpack:///src/app/clients/clients.component.html","webpack:///src/app/clients/clients.service.ts","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/page-not-found/page-not-found.component.ts","webpack:///src/app/page-not-found/page-not-found.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","appRoutes","path","component","children","redirectTo","pathMatch","AppRoutingModule","forRoot","imports","AppComponent","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","ClientAddComponent","clService","today","getDate","addClientForm","required","email","Date","toDateString","event","file","target","files","patchValue","image","allowedTypes","includes","type","reader","FileReader","onload","imageData","result","readAsDataURL","alert","dob","value","valid","addClient","reset","onSubmit","onFileSelected","ClientEditComponent","route","editClientForm","clientid","snapshot","params","getClient","fetchClient","subscribe","client","toString","setValue","fname","lname","plc","casedetails","updateClient","ClientListComponent","submitAction","getClientsByAPI","addToClients","clients","searchForm","searchvalue","search","filterClients","getClients","reloadTable","ClientViewComponent","ClientsComponent","encapsulation","None","ClientsService","http","slice","get","clientData","next","filteredClients","push","map","res","json","FormData","append","datec","post","_id","put","msg","HeaderComponent","PageNotFoundComponent","environment","production","bootstrapModule","err","console","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\r\nimport { ClientsComponent } from './clients/clients.component';\r\nimport { ClientEditComponent } from './clients/client-edit/client-edit.component';\r\nimport { ClientViewComponent } from './clients/client-view/client-view.component';\r\nimport { ClientListComponent } from './clients/client-list/client-list.component';\r\nimport { ClientAddComponent } from './clients/client-add/client-add.component';\r\n\r\nconst appRoutes: Routes = [\r\n\t{ path: 'clients', component: ClientsComponent, children: [\r\n\t\t{ path: 'add', component: ClientAddComponent },\r\n\t\t{ path: 'edit/:id', component: ClientEditComponent },\r\n\t\t{ path: 'view/:id', component: ClientViewComponent },\r\n\t\t{ path: 'list', component: ClientListComponent }\r\n\t]},\r\n\t{ path: 'not-found', component: PageNotFoundComponent },\r\n\t{ path: '', redirectTo: '/clients/add', pathMatch:'full' },\r\n\t{ path: '**', redirectTo: '/not-found'}\r\n];\r\n\r\n@NgModule({\r\n\timports: [\r\n\t\tRouterModule.forRoot(appRoutes)\r\n\t],\r\n\texports: [\r\n\t\tRouterModule\r\n\t]\r\n})\r\n\r\nexport class AppRoutingModule{\r\n\r\n}","import { Component, ElementRef, HostBinding, HostListener } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n}","<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n<br>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n// import { HttpModule } from '@angular/http';\r\nimport { AppComponent } from './app.component';\r\nimport { PageNotFoundComponent } from './page-not-found/page-not-found.component';\r\n\r\nimport { AppRoutingModule } from './app-routing.model'; \r\nimport { AngularFileUploaderModule } from \"angular-file-uploader\";\r\n\r\nimport { HeaderComponent } from './header/header.component';\r\nimport { ClientsComponent } from './clients/clients.component';\r\nimport { ClientListComponent } from './clients/client-list/client-list.component';\r\nimport { ClientEditComponent } from './clients/client-edit/client-edit.component';\r\nimport { ClientViewComponent } from './clients/client-view/client-view.component';\r\nimport { ClientAddComponent } from './clients/client-add/client-add.component';\r\nimport { ClientsService } from './clients/clients.service';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    PageNotFoundComponent,\r\n    HeaderComponent,\r\n    ClientsComponent,\r\n    ClientListComponent,\r\n    ClientEditComponent,\r\n    ClientViewComponent,\r\n    ClientAddComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    ReactiveFormsModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    AngularFileUploaderModule\r\n  ],\r\n  providers: [ClientsService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ClientsService } from '../clients.service';\r\n\r\n@Component({\r\n  selector: 'app-client-add',\r\n  templateUrl: './client-add.component.html',\r\n  styleUrls: ['./client-add.component.css']\r\n})\r\nexport class ClientAddComponent implements OnInit {\r\n\r\n  addClientForm: FormGroup;\r\n\r\n  imageData: string;\r\n\r\n  today = this.clService.getDate();\r\n\r\n  constructor(private clService: ClientsService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.addClientForm = new FormGroup({\r\n      'fname': new FormControl(null, Validators.required),\r\n      'lname': new FormControl(null, Validators.required),\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'datec': new FormControl(new Date().toDateString(), Validators.required),\r\n      'plc': new FormControl(null, Validators.required),\r\n      'dob': new FormControl(null),\r\n      'image': new FormControl(null),\r\n      'casedetails': new FormControl(null, Validators.required)\r\n    });\r\n\r\n    // console.log(this.getDate());\r\n  }\r\n\r\n  onFileSelected(event: Event){\r\n    const file = (event.target as HTMLInputElement).files[0];\r\n\r\n    this.addClientForm.patchValue({image: file});\r\n    const allowedTypes = ['image/png', 'image/jpg', 'image/jpeg'];\r\n\r\n    if(file && allowedTypes.includes(file.type)){\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        this.imageData = reader.result as string;\r\n      }\r\n\r\n      reader.readAsDataURL(file);\r\n    }else{\r\n      alert('Unsupported image format');\r\n      this.addClientForm.patchValue({'image': null});\r\n      this.imageData = null;\r\n    }\r\n  }\r\n\r\n  setDOB(event: Event){\r\n    const dob = (<HTMLInputElement>event.target).value;\r\n    this.addClientForm.patchValue({'dob': dob});\r\n  }\r\n\r\n  onSubmit(){\r\n    if(this.addClientForm.valid){\r\n      this.clService.addClient(this.addClientForm.value);\r\n      alert('Client profiled');\r\n      this.addClientForm.reset();\r\n      this.imageData = '';\r\n    }else{\r\n      alert('Your information is not yet complete, please fill all required fields.');\r\n    }\r\n    // console.log(this.addClientForm.valid);\r\n    \r\n  }\r\n\r\n  \r\n\r\n\r\n  // afuConfig = {\r\n  //   formatsAllowed: \".jpg,.png\",\r\n  //   uploadAPI: {\r\n  //     url:\"https://localhost:3000/images\"\r\n  //   }\r\n  // };\r\n}\r\n","<form [formGroup]=\"addClientForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"card\">\r\n        <div class=\"card-header bg-primary text-light\">\r\n            <i class=\"fa fa-user-plus\"> </i> \r\n            <b> Add Client</b>   \r\n        </div>\r\n        <div class=\"card-body\">\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"fname\">First Name</label>\r\n                        <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"fname\"/>\r\n                        <span *ngIf=\"!addClientForm.get('fname').valid && addClientForm.get('fname').touched\">Please enter your first name</span>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"lname\">Last Name</label>\r\n                        <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"lname\"/>\r\n                        <span *ngIf=\"!addClientForm.get('lname').valid && addClientForm.get('lname').touched\">Please enter your last name</span>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"mail\">E-mail</label>\r\n                        <input type=\"email\" class=\"form-control\" required=\"required\" formControlName=\"email\"/>\r\n                        <span *ngIf=\"!addClientForm.get('email').valid && addClientForm.get('email').touched\">Please enter a valid email</span>\r\n                        <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"datec\" hidden readonly/>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"plc\">Primary Legal Counsel</label>\r\n                        <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"plc\"/>\r\n                        <span *ngIf=\"!addClientForm.get('plc').valid && addClientForm.get('plc').touched\">Please enter your primary legal counsel</span>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"dob\">Date of Birth</label>\r\n                        <input type=\"date\" class=\"form-control\" required=\"required\" formControlName=\"dob\"/>\r\n                        <span *ngIf=\"!addClientForm.get('dob').valid && addClientForm.get('dob').touched\">Date not set (consider retyping)</span>\r\n                        <!-- <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"dob\" value=\"{{ dob }}\"/> -->\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"image\">Image</label>\r\n                        <!-- <angular-file-uploader \r\n                            [config]=\"afuConfig\">\r\n                        </angular-file-uploader> -->\r\n                        <input (change)=\"onFileSelected($event)\" type=\"file\" class=\"form-control\"/>\r\n                        <span *ngIf=\"!imageData\">Please select an image (not required)</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-md-8\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"fname\">Case Details</label>\r\n                        <textarea type=\"text\" class=\"form-control\" required=\"required\" rows=\"5\" formControlName=\"casedetails\"></textarea>\r\n                        <span *ngIf=\"!addClientForm.get('casedetails').valid && addClientForm.get('casedetails').touched\">Please enter your case details</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <div *ngIf=\"imageData\">\r\n                        <img [src]=\"imageData\" [alt]=\"addClientForm.value.name\" class=\"img-thumbnail\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n        <div class=\"card-footer\">\r\n            <button type=\"submit\" class=\"btn btn-outline-primary btn-sm btn-block\">Submit</button>\r\n        </div>\r\n    </div>\r\n</form>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Client } from '../clients.model';\r\nimport { ClientsService } from '../clients.service';\r\nimport 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-client-edit',\r\n  templateUrl: './client-edit.component.html',\r\n  styleUrls: ['./client-edit.component.css']\r\n})\r\nexport class ClientEditComponent implements OnInit {\r\n\r\n  client:Client[];\r\n\r\n  editClientForm: FormGroup;\r\n\r\n  imageData: string = '';\r\n\r\n  clientid: string;\r\n\r\n\r\n  constructor(private clService: ClientsService, private route: ActivatedRoute) { }\r\n  \r\n\r\n  ngOnInit(): void {\r\n\r\n    this.editClientForm = new FormGroup({\r\n      'fname': new FormControl(null, Validators.required),\r\n      'lname': new FormControl(null, Validators.required),\r\n      'email': new FormControl(null, [Validators.required, Validators.email]),\r\n      'plc': new FormControl(null, Validators.required),\r\n      'dob': new FormControl(null),\r\n      'image': new FormControl(null),\r\n      'casedetails': new FormControl(null, Validators.required)\r\n    });\r\n    \r\n    this.clientid = this.route.snapshot.params['id'];\r\n    \r\n    this.clService.getClient(this.clientid);\r\n\r\n    this.clService.fetchClient.subscribe(\r\n      (client) => {\r\n        this.client = client;\r\n\r\n        if(this.client[0].image){\r\n          this.imageData = this.client[0].image.toString();\r\n        }\r\n\r\n        this.editClientForm.setValue({\r\n          'fname': this.client[0].fname,\r\n          'lname': this.client[0].lname,\r\n          'email': this.client[0].email,\r\n          'plc': this.client[0].plc,\r\n          'dob': this.client[0].dob,\r\n          'image': null,\r\n          'casedetails': this.client[0].casedetails\r\n        });\r\n      }\r\n    );\r\n  }\r\n\r\n  onFileSelected(event: Event){\r\n    const file = (event.target as HTMLInputElement).files[0];\r\n\r\n    this.editClientForm.patchValue({image: file});\r\n    const allowedTypes = ['image/png', 'image/jpg', 'image/jpeg'];\r\n\r\n    if(file && allowedTypes.includes(file.type)){\r\n      const reader = new FileReader();\r\n      reader.onload = () => {\r\n        this.imageData = reader.result as string;\r\n      }\r\n\r\n      reader.readAsDataURL(file);\r\n    }else{\r\n      alert('Unsupported image format');\r\n      this.editClientForm.patchValue({'image': null});\r\n      this.imageData = null;\r\n    }\r\n  }\r\n\r\n  setDOB(event: Event){\r\n    const dob = (<HTMLInputElement>event.target).value;\r\n    this.editClientForm.patchValue({'dob': dob});\r\n  }\r\n\r\n  onSubmit(){\r\n    if(this.editClientForm.valid){\r\n      this.clService.updateClient(this.editClientForm.value, this.clientid);\r\n      alert('Client Data Updated');\r\n    }else{\r\n      alert('Your information is not yet complete, please fill all required fields.');\r\n    }\r\n    \r\n  }\r\n}\r\n","<form [formGroup]=\"editClientForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"card\">\r\n        <div class=\"card-header bg-primary text-light\">\r\n            <i class=\"fa fa-edit\"> </i> \r\n            <b> Update Client</b>   \r\n        </div>\r\n        <div class=\"card-body\">\r\n\r\n            <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"fname\">First Name</label>\r\n                        <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"fname\"/>\r\n                        <span *ngIf=\"!editClientForm.get('fname').valid && editClientForm.get('fname').touched\">Please enter your first name</span>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"lname\">Last Name</label>\r\n                        <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"lname\"/>\r\n                        <span *ngIf=\"!editClientForm.get('lname').valid && editClientForm.get('lname').touched\">Please enter your last name</span>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"mail\">E-mail</label>\r\n                        <input type=\"email\" class=\"form-control\" required=\"required\" formControlName=\"email\"/>\r\n                        <span *ngIf=\"!editClientForm.get('email').valid && editClientForm.get('email').touched\">Please enter a valid email</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"plc\">Primary Legal Counsel</label>\r\n                        <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"plc\"/>\r\n                        <span *ngIf=\"!editClientForm.get('plc').valid && editClientForm.get('plc').touched\">Please enter your primary legal counsel</span>\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"dob\">Date of Birth</label>\r\n                        <input type=\"date\" class=\"form-control\" required=\"required\" formControlName=\"dob\"/>\r\n                        <span *ngIf=\"!editClientForm.get('dob').valid && editClientForm.get('dob').touched\">Date not set (consider retyping)</span>\r\n                        <!-- <input type=\"text\" class=\"form-control\" required=\"required\" formControlName=\"dob\" value=\"{{ dob }}\"/> -->\r\n                    </div>\r\n                    <div class=\"form-group\">\r\n                        <label for=\"image\">Image</label>\r\n                        <input (change)=\"onFileSelected($event)\" type=\"file\" class=\"form-control\"/>\r\n                        <span *ngIf=\"!imageData\">Please select an image (not required)</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-md-8\">\r\n                    <div class=\"form-group\">\r\n                        <label for=\"fname\">Case Details</label>\r\n                        <textarea type=\"text\" class=\"form-control\" required=\"required\" rows=\"5\" formControlName=\"casedetails\"></textarea>\r\n                        <span *ngIf=\"!editClientForm.get('casedetails').valid && editClientForm.get('casedetails').touched\">Please enter your case details</span>\r\n                    </div>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <div *ngIf=\"imageData\">\r\n                        <img [src]=\"imageData\" [alt]=\"editClientForm.value.name\" class=\"img-thumbnail\"/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            \r\n        </div>\r\n        <div class=\"card-footer\">\r\n            <button type=\"submit\" class=\"btn btn-outline-primary btn-sm btn-block\">Submit</button>\r\n        </div>\r\n    </div>\r\n</form>","import { Component, ElementRef, OnInit, ViewChild } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { Client } from '../clients.model';\r\nimport { ClientsService } from '../clients.service';\r\nimport 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-client-list',\r\n  templateUrl: './client-list.component.html',\r\n  styleUrls: ['./client-list.component.css']\r\n})\r\nexport class ClientListComponent implements OnInit {\r\n\r\n  submitAction:string = '';\r\n\r\n  clients: Client[];\r\n\r\n  searchForm: FormGroup;\r\n\r\n  @ViewChild('search') searchOption: ElementRef;\r\n\r\n  constructor(private clService: ClientsService) {\r\n    \r\n  }\r\n\r\n  ngOnInit(){\r\n    this.clService.getClientsByAPI();\r\n    // this.clients = this.clService.getClients();\r\n    this.clService.addToClients.subscribe(\r\n      (clients) => {\r\n        this.clients = clients;\r\n      }\r\n    )\r\n\r\n   \r\n\r\n    this.searchForm = new FormGroup({\r\n      'search': new FormControl(null, Validators.required)\r\n    });\r\n  }\r\n\r\n  onSubmit(){\r\n    // console.log(this.searchForm.value.search);\r\n    const searchvalue:string = this.searchForm.value.search\r\n    this.clients = this.clService.filterClients(searchvalue);\r\n    this.searchForm.setValue({\r\n      search: ''\r\n    })\r\n  }\r\n\r\n  reloadTable(){\r\n    this.clients = this.clService.getClients();\r\n  }\r\n\r\n\r\n}\r\n","<form [formGroup]=\"searchForm\" (ngSubmit)=\"onSubmit()\">\r\n    <div class=\"pull-right\">\r\n        <input type=\"search\" formControlName=\"search\" class=\"form-control\" placeholder=\"Search by Last Name. . .\" #search/>\r\n        <button type=\"submit\" hidden></button>\r\n    </div>\r\n</form>\r\n\r\n<div class=\"pull-left\">\r\n    <button type=\"button\" class=\"btn btn-outline-warning btn-sm\" (click)=\"reloadTable()\">\r\n        <i class=\"fa fa-history\"></i> Reload\r\n    </button>\r\n</div>\r\n\r\n<div class=\"table-responsive\">\r\n    <table class=\"table table-hover table-striped\">\r\n        <thead class=\"bg-primary text-light\">\r\n          <tr>\r\n                <th>ID</th>\r\n                <th>Name</th>\r\n                <th>Email</th>\r\n                <th>Primary Legal Counsel</th>\r\n                <th>Date of Birth</th>\r\n                <th>Image</th>\r\n                <th>Date Profiled</th>\r\n                <th colspan=\"2\">Action</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr *ngFor=\"let client of clients; let i = index\">\r\n                <th>{{ i + 1 }}</th>\r\n                <td>{{ client.fname }} {{ client.lname }}</td>\r\n                <td>{{ client.email }}</td>\r\n                <td>{{ client.plc }}</td>\r\n                <td>{{ client.dob }}</td>\r\n                <td>\r\n                    <img *ngIf=\"client.image; else noImage\" [src]=\"client.image\" [alt]=\"client.fname\" class=\"img-fluid\"/>\r\n                    <ng-template #noImage>\r\n                        <p class=\"text-center\">\r\n                            <em class=\"text-danger\">No Image</em>\r\n                        </p>\r\n                    </ng-template>\r\n                </td>\r\n                <td>{{ client.datec }}</td>\r\n                <td>\r\n                    <a [routerLink]=\"['/clients/view/'+client._id]\">\r\n                        <button type=\"button\" class=\"btn btn-outline-primary btn-sm\">\r\n                            <i class=\"fa fa-eye\"></i>\r\n                        </button>\r\n                    </a>\r\n                    \r\n                <td>\r\n                    <a [routerLink]=\"['/clients/edit/'+client._id]\">\r\n                        <button type=\"button\" class=\"btn btn-outline-warning btn-sm\">\r\n                            <i class=\"fa fa-edit\"></i>\r\n                        </button>\r\n                    </a>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n      </table>\r\n    \r\n</div>\r\n\r\n\r\n  \r\n  ","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Client } from '../clients.model';\r\nimport { ClientsService } from '../clients.service';\r\n\r\n@Component({\r\n  selector: 'app-client-view',\r\n  templateUrl: './client-view.component.html',\r\n  styleUrls: ['./client-view.component.css']\r\n})\r\nexport class ClientViewComponent implements OnInit {\r\n  client: Client[] = [];\r\n\r\n  clientid: string;\r\n\r\n  constructor(private clService: ClientsService, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.clientid = this.route.snapshot.params['id'];\r\n    \r\n    this.clService.getClient(this.clientid);\r\n\r\n    this.clService.fetchClient.subscribe(\r\n      (client) => {\r\n        this.client = client;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"content\" *ngFor=\"let client of client\">\r\n    <div class=\"text-center\">\r\n        <h3>Client's Data</h3>\r\n        <img [src]=\"client.image\" [alt]=\"client.fname\" class=\"img-thumbnail\" style=\"max-height: 300px; max-width: 280px; min-height: 300px; min-width: 280px\"/>\r\n    </div><br/>\r\n    <table class=\"table-bordered\" width=\"100%\" cellpadding=\"10\">\r\n        <tbody>\r\n            <tr>\r\n                <th>Client's Name</th>\r\n                <td>{{ client.fname }} {{ client.lname }}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Client's Email</th>\r\n                <td>{{ client.email }}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Client's DOB</th>\r\n                <td>{{ client.dob }}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Date Profiled</th>\r\n                <td>{{ client.datec }}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Primary Legal Counsel</th>\r\n                <td>{{ client.plc }}</td>\r\n            </tr>\r\n            <tr>\r\n                <th>Case details</th>\r\n                <td>{{ client.casedetails }}</td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n\r\n    <div class=\"text-center view\">\r\n        <a href=\"javascript:print()\" class=\"btn btn-outline-primary\">\r\n            <i class=\"fa fa-print\"></i> Print\r\n        </a>\r\n    </div>\r\n</div>","import { Component, OnInit, ViewEncapsulation } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Client } from './clients.model';\r\nimport { ClientsService } from './clients.service';\r\n\r\n@Component({\r\n  selector: 'app-clients',\r\n  templateUrl: './clients.component.html',\r\n  styleUrls: ['./clients.component.css'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class ClientsComponent implements OnInit {\r\n  client: Client[] = [];\r\n\r\n  clientid: string;\r\n\r\n  constructor(private clService: ClientsService, private route: ActivatedRoute) { }\r\n\r\n  ngOnInit(): void {\r\n    this.clientid = this.route.snapshot.params['id'];\r\n    \r\n    this.clService.getClient(this.clientid);\r\n\r\n    this.clService.fetchClient.subscribe(\r\n      (client) => {\r\n        this.client = client;\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<br>\r\n<div class=\"container-fluid\">\r\n    <div class=\"row\">\r\n        <div class=\"col-md-4 view\">\r\n            <div class=\"list-group\">\r\n                <a routerLink=\"/clients/add\" routerLinkActive=\"active\" class=\"list-group-item list-group-item-action\">Add Client</a>\r\n                <a routerLink=\"/clients/list\" routerLinkActive=\"active\" class=\"list-group-item list-group-item-action\">Clients' List</a>\r\n                <a routerLink=\"/clients/view\" routerLinkActive=\"active\" href=\"#\" class=\"list-group-item list-group-item-action disabled\" tabindex=\"-1\" aria-disabled=\"true\">Client's Profile</a>\r\n                <a routerLink=\"/clients/edit\" routerLinkActive=\"active\" href=\"#\" class=\"list-group-item list-group-item-action disabled\" tabindex=\"-1\" aria-disabled=\"true\">Update Client</a>\r\n              </div>\r\n        </div>\r\n        <div class=\"col-md-8\">\r\n            <router-outlet></router-outlet>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Injectable, OnInit } from \"@angular/core\";\r\nimport { HttpClient , HttpHeaders } from '@angular/common/http';\r\nimport 'rxjs/add/operator/map';\r\n\r\nimport { Client } from \"./clients.model\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n@Injectable()\r\nexport class ClientsService implements OnInit {\r\n    clients: Client[] = [];\r\n\r\n    client: Client[] = [];\r\n\r\n    addToClients = new Subject<Client[]>();\r\n\r\n    fetchClient = new Subject<Client[]>();\r\n\r\n    constructor(private http: HttpClient){}\r\n\r\n    ngOnInit(): void {\r\n        this.getClientsByAPI();\r\n    }\r\n\r\n    getClients(){\r\n        return this.clients.slice();\r\n    }\r\n\r\n    getClient(id:string){\r\n        this.http.get<{message: string, clients: Client[]}>('http://localhost:3000/api/clients/fetch/'+id)\r\n        .subscribe(\r\n            (clientData) => {\r\n                this.client = clientData.clients;\r\n                this.fetchClient.next([...this.client]);\r\n            }\r\n        );\r\n    }\r\n\r\n    filterClients(value:string){\r\n        const filteredClients: Client[] = [];\r\n\r\n        for(let client of this.clients){\r\n            if(client.lname === value){\r\n                filteredClients.push(client);\r\n            }\r\n        }\r\n\r\n        return filteredClients;\r\n    }\r\n\r\n\r\n    getClientsByAPI(){\r\n        this.http.get<{message: string, clients: Client[]}>('http://localhost:3000/api/clients/fetch')\r\n        .subscribe(\r\n            (clientData) => {\r\n                this.clients = clientData.clients;\r\n                this.addToClients.next([...this.clients]);\r\n            }\r\n        );\r\n        \r\n    }\r\n\r\n    // addClient(newClient){\r\n    //     var headers = new HttpHeaders();\r\n\r\n    //     headers.append('Content-Type', 'application-json');\r\n\r\n    //     return this.http.post('http://localhost:3000/api/clients/add', newClient, {headers: headers})\r\n    //     .map((res: Response) => res.json());\r\n    // }\r\n\r\n    deleteClient(id){\r\n        return this.http.delete('http://localhost:3000/api/clients/delete/'+id)\r\n        .map((res: Response) => res.json());\r\n    }\r\n\r\n    addClient(client: Client){\r\n        const clientData = new FormData();\r\n\r\n        clientData.append(\"fname\", client.fname);\r\n        clientData.append(\"lname\", client.lname);\r\n        clientData.append(\"email\", client.email);\r\n        clientData.append(\"datec\", client.datec);\r\n        clientData.append(\"dob\", client.dob);\r\n        clientData.append(\"plc\", client.plc);\r\n        clientData.append(\"casedetails\", client.casedetails);\r\n\r\n        if(client.image){\r\n            clientData.append(\"image\", client.image);\r\n            this.http.post<{msg: string, client: Client}>(\"http://localhost:3000/api/clients/add/image\", clientData)\r\n            .subscribe(\r\n                (clientData) => {\r\n                    const client: Client = {\r\n                        _id: clientData.client._id,\r\n                        fname: clientData.client.fname,\r\n                        lname: clientData.client.lname,\r\n                        email: clientData.client.email,\r\n                        dob: clientData.client.dob,\r\n                        datec: clientData.client.datec,\r\n                        casedetails: clientData.client.casedetails,\r\n                        plc: clientData.client.plc,\r\n                        image: clientData.client.image\r\n                    }\r\n                    this.clients.push(client);\r\n                    this.addToClients.next([...this.clients]);\r\n                }\r\n            );\r\n        }else{\r\n            this.http.post<{msg: string, client: Client}>(\"http://localhost:3000/api/clients/add\", client)\r\n            .subscribe(\r\n                (clientData) => {\r\n                    const client: Client = {\r\n                        _id: clientData.client._id,\r\n                        fname: clientData.client.fname,\r\n                        lname: clientData.client.lname,\r\n                        email: clientData.client.email,\r\n                        dob: clientData.client.dob,\r\n                        datec: clientData.client.datec,\r\n                        casedetails: clientData.client.casedetails,\r\n                        plc: clientData.client.plc,\r\n                        image: clientData.client.image\r\n                    }\r\n                    this.clients.push(client);\r\n                    this.addToClients.next([...this.clients]);\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n\r\n\r\n    updateClient(client: Client, id: string): any{\r\n        const clientData = new FormData();\r\n\r\n        clientData.append(\"fname\", client.fname);\r\n        clientData.append(\"lname\", client.lname);\r\n        clientData.append(\"email\", client.email);\r\n        clientData.append(\"dob\", client.dob);\r\n        clientData.append(\"plc\", client.plc);\r\n        clientData.append(\"casedetails\", client.casedetails);\r\n\r\n        if(client.image){\r\n            clientData.append(\"image\", client.image);\r\n            this.http.put<{msg: string, client: Client}>(\"http://localhost:3000/api/clients/updateWithImage/\"+id, clientData)\r\n            .subscribe(\r\n                (clientData) => {\r\n                    if(clientData.msg === 'success'){\r\n                        return 'success';\r\n                    }else{\r\n                        return 'failed';\r\n                    }\r\n                }\r\n            );\r\n        }else{\r\n            this.http.put<{msg: string, client: Client}>(\"http://localhost:3000/api/clients/update/\"+id, client)\r\n            .subscribe(\r\n                (clientData) => {\r\n                    if(clientData.msg === 'success'){\r\n                        return 'success';\r\n                    }else{\r\n                        return 'failed';\r\n                    }\r\n                }\r\n            );\r\n        }\r\n    }\r\n\r\n    getDate(){\r\n        const today = new Date().toDateString();\r\n        return today;\r\n      }\r\n\r\n}","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n    <a class=\"navbar-brand font-weight-bold\" [routerLink]=\"['/clients/add']\">Law Firm X (Profiling System)</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n  \r\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul class=\"navbar-nav mr-auto\">\r\n        <li class=\"nav-item active\">\r\n          <a class=\"nav-link\" [routerLink]=\"['/clients/add']\">Home <span class=\"sr-only\">(current)</span></a>\r\n        </li>\r\n      </ul>\r\n      <!-- <form class=\"form-inline my-2 my-lg-0\">\r\n        <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\r\n        <button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n      </form> -->\r\n    </div>\r\n  </nav>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-page-not-found',\r\n  templateUrl: './page-not-found.component.html',\r\n  styleUrls: ['./page-not-found.component.css']\r\n})\r\nexport class PageNotFoundComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h3 class=\"text-danger text-center\">This page was not found...!</h3>","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}